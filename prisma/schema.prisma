generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model error_submits {
  id          Int    @id @default(autoincrement()) @db.UnsignedInt
  from        String    @db.LongText
  to          String    @db.LongText
  description String    @db.VarChar(255)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model failed_jobs {
  id         Int   @id @default(autoincrement()) @db.UnsignedInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model jobs {
  id           Int @id @default(autoincrement()) @db.UnsignedInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model new_words {
  id          Int    @id @default(autoincrement()) @db.UnsignedInt
  norwegian   String    @db.VarChar(255)
  sami        String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  email       String?   @db.VarChar(255)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             Int    @id @default(autoincrement()) @db.UnsignedInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   Int    @db.UnsignedInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model smj_translations {
  id            Int  @unique(map: "smj_translations_id_idx") @default(autoincrement()) @db.UnsignedInt
  fra           String? @db.Text
  til           String? @db.Text
  oversatt_fra  String? @db.Text
  oversatt_til  String? @db.Text
  kredittering  String? @db.Text
}

model statistics {
  id       Int   @id @default(autoincrement()) @db.UnsignedInt
  date     DateTime @db.Date
  searches Int      @default(0)
}

model users {
  id                Int    @id @default(autoincrement()) @db.UnsignedInt
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}
